name: CI

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  release:
    types: [created]

env:
  POETRY_CACHE_DIR: .cache/poetry
  PIP_CACHE_DIR: .cache/pip

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]
        include:
          - python-version: "3.12"
            tox_env: "py312"
          - python-version: "3.13"
            tox_env: "py313"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Poetry and pip
        uses: actions/cache@v4
        with:
          path: |
            .cache/pip
            .cache/poetry
            .venv
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.python-version }}-

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry config cache-dir ${{ env.POETRY_CACHE_DIR }}
          poetry self add poetry-plugin-export

      - name: Install dependencies
        run: poetry install

      - name: Run tests
        run: poetry run tox --skip-env "^(?!${{ matrix.tox_env }})"

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  release:
    name: Create Release
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'created'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry self add poetry-plugin-export

      - name: Configure PyPI token
        run: poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}

      - name: Build and publish to PyPI
        run: |
          poetry build
          poetry publish
